{
    "sites":[
        {
            "id":1,
            "key":"360kan",
            "name":"360影视",
            "api":"https://www.360kan.com",
            "download":"",
            "group":1,
            "isActive":true,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":true,
            "needJiexi":true,
            "isSearch":true,
            "status":"已启用",
            "type":2,
            "jiexiUrl":"https://api.web.360kan.com/v1",
            "searchUrl":"https://api.so.360kan.com/index?force_v=1&v_ap=1&tab=all&kw={words}&pageno={pg}",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":2,
            "key":"lezhu",
            "name":"乐猪影视",
            "api":"http://www.lezhutv.com",
            "download":"",
            "group":1,
            "isActive":true,
            "isHidden":false,
            "reverseOrder":true,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"已启用",
            "type":2,
            "jiexiUrl":"http://www.lezhutv.com/hls2/index.php?url=",
            "searchUrl":"{homeUrl}/search-pg-{page}-wd-{words}.html",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":3,
            "key":"mac_fantuan",
            "name":"饭团影视",
            "api":"https://www.fantuanhd.com",
            "download":"",
            "group":1,
            "isActive":true,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":true,
            "needJiexi":false,
            "isSearch":true,
            "status":"已启用",
            "type":2,
            "jiexiUrl":"https://www.fantuan1.com",
            "searchUrl":"{homeUrl}/index.php/ajax/suggest?mid=1&limit=100&wd={words}",
            "parserClass":"MacCmsSelector",
            "userAgent":"",
            "config":"{\"index\":true,\"naviSuffix\":\"/show/id-{catId}{area}{rank}{cat}{page}{year}.html\",\"naviList\":[{\"name\":\"电影\",\"url\":\"/show/id-20.html\",\"type\":\"\",\"catId\":\"20\"},{\"name\":\"剧集\",\"url\":\"/show/id-21.html\",\"type\":\"\",\"catId\":\"21\"},{\"name\":\"综艺\",\"url\":\"/show/id-22.html\",\"type\":\"\",\"catId\":\"22\"},{\"name\":\"动漫\",\"url\":\"/show/id-23.html\",\"type\":\"\",\"catId\":\"23\"},{\"name\":\"记录\",\"url\":\"/show/id-24.html\",\"type\":\"\",\"catId\":\"24\"},{\"name\":\"动画\",\"url\":\"/show/id-25.html\",\"type\":\"\",\"catId\":\"25\"}],\"filter\":{\"selector\":\"#screenbox > ul.clearfix\",\"pagePrefix\":\"/page/\",\"rankPrefix\":\"/by/\",\"catPrefix\":\"/class/\",\"areaPrefix\":\"/area/\",\"yearPrefix\":\"/year/\",\"cat\":{\"20\":{\"line\":0},\"21\":{\"line\":0},\"22\":{\"line\":0},\"23\":{\"line\":0},\"24\":{\"line\":0},\"25\":{\"line\":0}},\"area\":{\"20\":{\"line\":1},\"21\":{\"line\":1},\"22\":{\"line\":1},\"23\":{\"line\":1},\"24\":{\"line\":1},\"25\":{\"line\":1}},\"year\":{\"20\":{\"line\":2},\"21\":{\"line\":2},\"22\":{\"line\":2},\"23\":{\"line\":2},\"24\":{\"line\":2},\"25\":{\"line\":2}},\"rank\":[{\"name\":\"评分排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"score\"},{\"name\":\"时间排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"time\"},{\"name\":\"热度排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"hits\"}]},\"indexVideos\":{\"videoSelector\":\"div.stui-vodlist__box > a\",\"titleAttr\":\"title\",\"subtitleSelector\":\"span.pic-text.text-right\"},\"tabVideos\":{\"videoSelector\":\"body > div.container > div > div > div.stui-pannel__bd.clearfix > ul > li > div.stui-vodlist__box > a\",\"titleAttr\":\"title\",\"subtitleSelector\":\"span.pic-text.text-right\"},\"totalPage\":{\"type\":\"split\",\"selector\":\"li.active.num\",\"subPrefix\":\"\",\"subEnd\":\"\"},\"detailUrl\":\"/detail/id-{vid}.html\",\"detailParse\":{\"detailSelector\":\"div.stui-content > div.stui-content__detail > p\",\"introSelector\":\"div.stui-content__detail > p.desc.detail > span.detail-content\"},\"sources\":{\"headSelector\":\"div.stui-vodlist__head > h3\",\"sourceSelector\":\"ul.stui-content__playlist.clearfix\",\"linkSelector\":\"li > a\"},\"findPlayUrl\":{\"findType\":\"script\",\"scriptSelector\":\"\",\"subPrefix\":\"var player_aaaa=\",\"subEnd\":\"</script>\",\"playPrefix\":\"\",\"playEnd\":\"\",\"parseJs\":\"player\",\"jsUrl\":\"\",\"playPrefix\":\"\",\"playEnd\":\"\"}}"
        },
        {
            "id":4,
            "key":"mac_tvbyb",
            "name":"TVB云播",
            "api":"http://www.tvyb03.com",
            "download":"",
            "group":0,
            "isActive":true,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":true,
            "needJiexi":false,
            "isSearch":true,
            "status":"已启用",
            "type":2,
            "jiexiUrl":"https://www.178du.com/",
            "searchUrl":"{homeUrl}/index.php/ajax/suggest?mid=1&limit=100&wd={words}",
            "parserClass":"MacCmsSelector",
            "userAgent":"",
            "config":"{\"findWeb\":\"https://www.178du.com\",\"index\":true,\"naviSuffix\":\"/vod/show{area}{rank}{cat}{catId}{page}{year}.html\",\"headers\":{},\"naviList\":[{\"name\":\"电影\",\"url\":\"/show/id/1.html\",\"type\":\"\",\"catId\":\"1\"},{\"name\":\"剧集\",\"url\":\"/show/id/2.html\",\"type\":\"\",\"catId\":\"2\"},{\"name\":\"综艺\",\"url\":\"/show/id/3.html\",\"type\":\"\",\"catId\":\"3\"},{\"name\":\"动漫\",\"url\":\"/show/id/4.html\",\"type\":\"\",\"catId\":\"4\"}],\"filter\":{\"selector\":\"div.myui-panel_bd > div.slideDown-box > ul.myui-screen__list.nav-slide.clearfix\",\"catIdPrefix\":\"/id/\",\"pagePrefix\":\"/page/\",\"rankPrefix\":\"/by/\",\"catPrefix\":\"/class/\",\"areaPrefix\":\"/area/\",\"yearPrefix\":\"/year/\",\"cat\":{\"1\":{\"line\":1},\"2\":{\"line\":1},\"3\":{\"line\":0},\"4\":{\"line\":0}},\"area\":{\"1\":{\"line\":2},\"2\":{\"line\":2},\"3\":{\"line\":1},\"4\":{\"line\":1}},\"year\":{\"1\":{\"line\":3},\"2\":{\"line\":3},\"3\":{\"line\":2},\"4\":{\"line\":2}},\"rank\":[{\"name\":\"评分排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\" :\"score\"},{\"name\":\"时间排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"time\"},{\"name\":\"热度排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"hits\"}]},\"indexVideos\":{\"videoSelector\":\"ul.myui-vodlist.clearfix > li.col-lg-8.col-md-8.col-sm-4.col-xs-3 > div.myui-vodlist__box > a\",\"titleAttr\":\"title\",\"subtitleSelector\":\"span.pic-tag.pic-tag-top\"},\"tabVideos\":{\"videoSelector\":\"div.myui-vodlist__box > a\",\"titleAttr\":\"title\",\"subtitleSelector\":\"span.pic-tag.pic-tag-top\"},\"totalPage\":{\"type\":\"split\",\"selector\":\"body > div.container > div > ul > li.visible-xs > a\",\"subPrefix\":\"\",\"subEnd\":\"\"},\"detailUrl\":\"/vod/detail/id/{vid}.html\",\"detailParse\":{\"detailSelector\":\"div.myui-content__detail > p\",\"introSelector\":\"#desc > div > div.myui-panel_bd > div > span.data > p\"},\"sources\":{\"headSelector\":\"div.myui-panel__head.bottom-line.active.clearfix > h3\",\"startHeader\":1,\"sourceSelector\":\"div.myui-panel_bd.clearfix > ul.myui-content__list.scrollbar.sort-list.clearfix\",\"linkSelector\":\"li > a\"},\"findPlayUrl\":{\"findType\":\"script\",\"scriptSelector\":\"\",\"subPrefix\":\"var player_aaaa=\",\"subEnd\":\"</script>\",\"playPrefix\":\"\",\"playEnd\":\"\",\"parseJs\":\"playerconfig\",\"jsUrl\":\"\",\"playPrefix\":\"\",\"playEnd\":\"\"}}"
        },
        {
            "id":5,
            "key":"mac_xiangdao",
            "name":"农民影视",
            "api":"https://v.xiangdao.me",
            "download":"",
            "group":0,
            "isActive":true,
            "isHidden":false,
            "reverseOrder":true,
            "isNavigation":true,
            "needJiexi":false,
            "isSearch":true,
            "status":"已启用",
            "type":2,
            "jiexiUrl":"https://vkceyugu.cdn.bspapp.com.xiangdao.me/webcloud/?url=",
            "searchUrl":"{homeUrl}/index.php?m=vod-search&wd={words}",
            "parserClass":"MacCmsSelector",
            "userAgent":"",
            "config":"{\"index\":true,\"naviSuffix\":\"/index.php?m=vod-list-id-{catId}-pg-{page}-order--by-{rank}-class-0-year-0-letter--area-{area}-lang-.html\",\"headers\":{},\"naviList\":[{\"name\":\"电影\",\"url\":\"/index.php?m=vod-list-id-1.html\",\"type\":\"\",\"catId\":\"1\"},{\"name\":\"剧集\",\"url\":\"/index.php?m=vod-list-id-2.html\",\"type\":\"\",\"catId\":\"2\"},{\"name\":\"综艺\",\"url\":\"/index.php?m=vod-list-id-3.html\",\"type\":\"\",\"catId\":\"3\"},{\"name\":\"动漫\",\"url\":\"/index.php?m=vod-list-id-4.html\",\"type\":\"\",\"catId\":\"4\"}],\"filter\":{\"selector\":\"body > section.first_list > div > ul\",\"linkSelector\":\"li > a\",\"catId\":{\"1\":{\"line\":0,\"needAll\":true,\"allValue\":\"1\",\"startIndex\":1,\"typeSplit\":true,\"subPrefix\":\"vod-list-id-\",\"subEnd\":\"-\"},\"2\":{\"line\":0,\"needAll\":true,\"allValue\":\"2\",\"startIndex\":1,\"typeSplit\":true,\"subPrefix\":\"vod-list-id-\",\"subEnd\":\"-\"},\"3\":{\"line\":0,\"needAll\":true,\"allValue\":\"3\",\"typeSplit\":true,\"startIndex\":1,\"subPrefix\":\"vod-list-id-\",\"subEnd\":\"-\"},\"4\":{\"line\":0,\"needAll\":true,\"allValue\":\"4\",\"typeSplit\":true,\"startIndex\":1,\"subPrefix\":\"vod-list-id-\",\"subEnd\":\"-\"}},\"area\":{\"1\":{\"line\":1,\"startIndex\":1,\"needAll\":true},\"2\":{\"line\":1,\"startIndex\":1,\"needAll\":true},\"3\":{\"line\":1,\"startIndex\":1,\"needAll\":true},\"4\":{\"line\":1,\"startIndex\":1,\"needAll\":true}},\"rank\":[{\"name\":\"评分排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\" :\"score\"},{\"name\":\"时间排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"time\"},{\"name\":\"热度排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"hits\"}]},\"indexVideos\":{\"videoSelector\":\"ul.resize_list > li > a\",\"titleAttr\":\"title\",\"subtitleSelector\":\"div.pic > span.sBottom\",\"imgSelector\":\"div.pic > img\",\"imgAttr\":\"data-echo\"},\"tabVideos\":{\"videoSelector\":\"ul.resize_list > li > a\",\"titleAttr\":\"title\",\"subtitleSelector\":\"div.pic > span.sBottom\",\"imgSelector\":\"div.pic > img\",\"imgAttr\":\"data-echo\"},\"searchVideos\":{\"videoSelector\":\"#data_list > li\",\"titleSelector\":\"div.txt.txtHeight > span.sTit\",\"urlSelector\":\"div.pic > a\",\"subtitleSelector\":\"div.pic > a > span\",\"imgSelector\":\"div.pic > a > img\",\"imgAttr\":\"data-src\"},\"totalPage\":{\"type\":\"split\",\"selector\":\"body > section.mod > div.page\",\"subPrefix\":\"当前:\",\"subEnd\":\"页\"},\"detailUrl\":\"/vod-detail-id-{vid}.html\",\"detailParse\":{\"detailSelector\":\"body > section.content > section > section > div > section.page-bd > div.desc_item\",\"introSelector\":\"body > section.mod > div.mod-bd > div > article > p\",\"yearSelector\":\"body > section.mod > div.mod-bd > div > article > span > em\"},\"sources\":{\"headSelector\":\"#leftTabBox > div.hd > ul > li > a\",\"sourceSelector\":\"div.numList > ul\",\"linkSelector\":\"li > a\"},\"videoPlayUrl\":{\"videoReg\":\"(video_id=|.m3u8|.mp4)\",\"subPrefix\":\"https://\"}}"
        },
        {
            "id":6,
            "key":"mac_xinshijue",
            "name":"视觉影视",
            "api":"https://www.6080dy2.com",
            "download":"",
            "group":0,
            "isActive":true,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"已启用",
            "type":2,
            "jiexiUrl":"https://www.dh6080.com",
            "searchUrl":"{homeUrl}/index.php/ajax/suggest?mid=1&limit=100&wd={words}",
            "parserClass":"MacCmsSelector",
            "userAgent":"",
            "config":"{\"findWeb\":\"https://www.dh6080.com\",\"index\":false,\"naviSuffix\":\"/vodshow/{catId}-{area}-{rank}-{cat}-----{page}---.html\",\"headers\":{},\"naviList\":[{\"name\":\"电影\",\"url\":\"/vodshow/1-----------.html\",\"type\":\"\",\"catId\":\"1\"},{\"name\":\"剧集\",\"url\":\"/vodshow/2-----------.html\",\"type\":\"\",\"catId\":\"2\"},{\"name\":\"综艺\",\"url\":\"/vodshow/3-----------.html\",\"type\":\"\",\"catId\":\"3\"},{\"name\":\"动漫\",\"url\":\"/vodshow/4-----------.html\",\"type\":\"\",\"catId\":\"4\"}],\"filter\":{\"selector\":\"div.page-heading > div > div.library-box.scroll-box > div.scroll-content > div.library-list\",\"cat\":{\"1\":{\"line\":2,\"needAll\":true},\"2\":{\"line\":2,\"needAll\":true},\"3\":{\"line\":2,\"needAll\":true},\"4\":{\"line\":2,\"needAll\":true}},\"area\":{\"1\":{\"line\":3,\"needAll\":true},\"2\":{\"line\":3,\"needAll\":true},\"3\":{\"line\":3,\"needAll\":true},\"4\":{\"line\":3,\"needAll\":true}},\"rank\":[{\"name\":\"评分排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"score\"},{\"name\":\"时间排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"time\"},{\"name\":\"热度排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"hits\"}]},\"indexVideos\":{},\"tabVideos\":{\"defaultRank\":\"time\",\"videoSelector\":\"div.module > div.module-list > div > div\",\"titleSelector\":\"div.module-item-cover > div.module-item-pic > a\",\"titleAttr\":\"title\",\"urlSelector\":\"div.module-item-cover > div.module-item-pic > a\",\"subtitleSelector\":\"div.module-item-text\",\"imgSelector\":\"div.module-item-cover > div.module-item-pic > img\",\"imgAttr\":\"data-src\"},\"totalPage\":{\"type\":\"last\",\"selector\":\"#page > a\",\"subPrefix\":\"-\",\"subEnd\":\"---.html\"},\"detailUrl\":\"/video/{vid}.html\",\"detailParse\":{\"detailSelector\":\"div.box.view-heading > div.video-info > div.video-info-main > div\",\"introSelector\":\"div.video-info-item.video-info-content.vod_content > span\",\"areaSelector\":\"div.video-info-aux.scroll-content > a\",\"areaIndex\":2,\"yearSelector\":\"div.video-info-aux.scroll-content > a\",\"yearIndex\":1,\"catSelector\":\"div.video-info-header > div > div > div\"},\"sources\":{\"headSelector\":\"div.module-tab-content > div.module-tab-item.tab-item > span\",\"sourceSelector\":\"div.module-tab-content > div.module-blocklist > div.sort-item\",\"linkSelector\":\"a[href]\",\"titleSelector\":\"span\"},\"findPlayUrl\":{\"findType\":\"script\",\"scriptSelector\":\"\",\"subPrefix\":\"var player_aaaa=\",\"subEnd\":\"</script>\",\"parseJs\":\"playerconfig\",\"jsUrl\":\"\",\"parsePrefix\":\"\",\"parseEnd\":\"\",\"onResource\":\"/(analysis.php)\"}}"
        },
        {
            "id":7,
            "key":"mac_dadagui",
            "name":"达达龟站",
            "api":"https://www.dadagui.me",
            "download":"",
            "group":0,
            "isActive":true,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"已启用",
            "type":2,
            "jiexiUrl":"https://dadagui.vip",
            "searchUrl":"{homeUrl}/index.php/ajax/suggest?mid=1&limit=100&wd={words}",
            "parserClass":"MacCmsSelector",
            "userAgent":"",
            "config":"{\"findWeb\":\"https://www.dadagui.vip\",\"naviSuffix\":\"/vodshow/{catId}-{area}-{rank}-{cat}-----{page}---.html\",\"headers\":{},\"naviList\":[{\"name\":\"电影\",\"url\":\"/vodshow/1-----------.html\",\"type\":\"\",\"catId\":\"1\"},{\"name\":\"剧集\",\"url\":\"/vodshow/2-----------.html\",\"type\":\"\",\"catId\":\"2\"},{\"name\":\"综艺\",\"url\":\"/vodshow/3-----------.html\",\"type\":\"\",\"catId\":\"3\"},{\"name\":\"动漫\",\"url\":\"/vodshow/4-----------.html\",\"type\":\"\",\"catId\":\"4\"}],\"filter\":{\"selector\":\"#screenbox > ul.clearfix\",\"cat\":{\"1\":{\"line\":0},\"2\":{\"line\":0},\"3\":{\"line\":0},\"4\":{\"line\":0}},\"area\":{\"1\":{\"line\":1},\"2\":{\"line\":1},\"3\":{\"line\":1},\"4\":{\"line\":1}},\"rank\":[{\"name\":\"评分排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\" :\"score\"},{\"name\":\"时间排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"time\"},{\"name\":\"热度排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"hits\"}]},\"tabVideos\":{\"videoSelector\":\"div.stui-vodlist__box > a\",\"titleAttr\":\"title\",\"subtitleSelector\":\"span.pic-text.text-right\",\"scoreSelector\":\"span.pic-tag.pic-tag-top\"},\"totalPage\":{\"type\":\"split\",\"selector\":\"li.active.num\",\"subPrefix\":\"\",\"subEnd\":\"\"},\"detailUrl\":\"/voddetail/{vid}.html\",\"detailParse\":{\"detailSelector\":\"div.stui-content > div.stui-content__detail > p\"},\"sources\":{\"headSelector\":\"div.stui-pannel-box > div.stui-pannel__bd > div.stui-vodlist__head > h3\",\"sourceSelector\":\"div.stui-pannel-box > div.stui-pannel__bd > ul.stui-content__playlist.clearfix\",\"linkSelector\":\"li > a\"},\"findPlayUrl\":{\"findType\":\"script\",\"scriptSelector\":\"\",\"subPrefix\":\"var player_aaaa=\",\"subEnd\":\"</script>\",\"playPrefix\":\"\",\"playEnd\":\"\",\"parseJs\":\"playerconfig\",\"jsUrl\":\"\",\"playPrefix\":\"\",\"playEnd\":\"\"}}"
        },
        {
            "id":8,
            "key":"mac_voflix",
            "name":"Vofx影视",
            "api":"https://www.voflix.com",
            "download":"",
            "group":0,
            "isActive":true,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"已启用",
            "type":2,
            "jiexiUrl":"https://www.voflix.com",
            "searchUrl":"{homeUrl}/index.php/ajax/suggest?mid=1&limit=100&wd={words}",
            "parserClass":"MacCmsSelector",
            "userAgent":"",
            "config":"{\"naviSuffix\":\"/show/{catId}-{area}-{rank}-{cat}-----{page}---.html\",\"headers\":{},\"naviList\":[{\"name\":\"电影\",\"url\":\"/show/1-----------.html\",\"type\":\"\",\"catId\":\"1\"},{\"name\":\"剧集\",\"url\":\"/show/2-----------.html\",\"type\":\"\",\"catId\":\"2\"},{\"name\":\"综艺\",\"url\":\"/show/3-----------.html\",\"type\":\"\",\"catId\":\"3\"},{\"name\":\"动漫\",\"url\":\"/show/4-----------.html\",\"type\":\"\",\"catId\":\"4\"}],\"filter\":{\"selector\":\"div.module-item-box\",\"cat\":{\"1\":{\"line\":1},\"2\":{\"line\":1},\"3\":{\"line\":1},\"4\":{\"line\":1}},\"area\":{\"1\":{\"line\":2},\"2\":{\"line\":2},\"3\":{\"line\":2},\"4\":{\"line\":2}},\"rank\":[{\"name\":\"评分排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\" :\"score\"},{\"name\":\"时间排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"time\"},{\"name\":\"热度排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"hits\"}]},\"tabVideos\":{\"defaultRank\":\"time\",\"videoSelector\":\"div.module-main.module-page > div.module-items.module-poster-items-base > a\",\"titleAttr\":\"title\",\"subtitleSelector\":\"div.module-item-cover > div.module-item-note\",\"imgSelector\":\"div.module-item-cover > div.module-item-pic > img\"},\"totalPage\":{\"type\":\"last\",\"selector\":\"#page > a\",\"subPrefix\":\"-\",\"subEnd\":\"---.html\"},\"detailUrl\":\"/detail/{vid}.html\",\"detailParse\":{\"detailSelector\":\"div.module-info-items > div\",\"introSelector\":\"div.module-info-item.module-info-introduction > div > p\",\"areaSelector\":\"div.module-info-tag > div.module-info-tag-link\",\"areaIndex\":1,\"yearSelector\":\"div.module-info-tag > div.module-info-tag-link\",\"yearIndex\":0,\"catSelector\":\"div.module-info-tag > div.module-info-tag-link\",\"catIndex\":2},\"sources\":{\"headSelector\":\"div.module-tab-items-box > div.module-tab-item.tab-item > span\",\"sourceSelector\":\" div.module-play-list > div\",\"titleSelector\":\"a > span\"},\"findPlayUrl\":{\"findType\":\"script\",\"scriptSelector\":\"\",\"subPrefix\":\"var player_aaaa=\",\"subEnd\":\"</script>\",\"parseJs\":\"player\",\"jsUrl\":\"\",\"parsePrefix\":\"\",\"parseEnd\":\"\"}}"
        },
        {
            "id":9,
            "key":"mac_libvio",
            "name":"Lvio影视",
            "api":"https://www.libvio.me",
            "download":"",
            "group":0,
            "isActive":true,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"已启用",
            "type":2,
            "jiexiUrl":"https://libvio.app",
            "searchUrl":"{homeUrl}/index.php/ajax/suggest?mid=1&limit=100&wd={words}",
            "parserClass":"MacCmsSelector",
            "userAgent":"",
            "config":"{\"findWeb\":\"https://libvio.app\",\"naviSuffix\":\"/show/{catId}-{area}-{rank}-{cat}-----{page}---.html\",\"headers\":{},\"naviList\":[{\"name\":\"电影\",\"url\":\"/show/1-----------.html\",\"type\":\"\",\"catId\":\"1\"},{\"name\":\"剧集\",\"url\":\"/show/2-----------.html\",\"type\":\"\",\"catId\":\"2\"},{\"name\":\"综艺\",\"url\":\"/show/3-----------.html\",\"type\":\"\",\"catId\":\"3\"},{\"name\":\"动漫\",\"url\":\"/show/4-----------.html\",\"type\":\"\",\"catId\":\"4\"}],\"filter\":{\"selector\":\"#screenbox > ul.clearfix\",\"cat\":{\"1\":{\"line\":0,\"catUrl\":\"/type/1.html\",\"needAll\":true}},\"area\":{\"1\":{\"line\":1,\"catUrl\":\"/type/1.html\",\"needAll\":true},\"2\":{\"line\":0},\"3\":{\"line\":0},\"4\":{\"line\":0}},\"rank\":[{\"name\":\"评分排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"score\"},{\"name\":\"时间排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"time\"},{\"name\":\"热度排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"hits\"}]},\"tabVideos\":{\"videoSelector\":\"div.stui-vodlist__box > a\",\"titleAttr\":\"title\",\"subtitleSelector\":\"span.pic-text.text-right\",\"scoreSelector\":\"span.pic-tag.pic-tag-top\"},\"totalPage\":{\"type\":\"split\",\"selector\":\"li.active.num\",\"subPrefix\":\"\",\"subEnd\":\"\"},\"detailUrl\":\"/detail/{vid}.html\",\"detailParse\":{\"detailSelector\":\"div.stui-content > div.stui-content__detail > p\"},\"sources\":{\"headSelector\":\"div.stui-vodlist__head > div.stui-pannel__head.clearfix > h3\",\"sourceSelector\":\"ul.stui-content__playlist.clearfix\",\"linkSelector\":\"li > a\"},\"findPlayUrl\":{\"findType\":\"script\",\"scriptSelector\":\"\",\"subPrefix\":\"var player_aaaa=\",\"subEnd\":\"</script>\",\"playPrefix\":\"\",\"playEnd\":\"\",\"parseJs\":\"player\",\"jsUrl\":\"\",\"playPrefix\":\"\",\"playEnd\":\"\"}}"
        },
        {
            "id":10,
            "key":"mac_nicktv",
            "name":"Nick影院",
            "api":"https://www.ajeee.com",
            "download":"https://jx.jsonplayer.com/player/?url=",
            "group":0,
            "isActive":true,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"已启用",
            "type":2,
            "jiexiUrl":"https://vip.ajeee.com/?url=",
            "searchUrl":"{homeUrl}/index.php/ajax/suggest?mid=1&limit=100&wd={words}",
            "parserClass":"MacCmsSelector",
            "userAgent":"",
            "config":"{\"findWeb\":\"https://mozhatu.vip\",\"naviSuffix\":\"/show/{catId}{area}{rank}{cat}{page}.html\",\"naviList\":[{\"name\":\"电影\",\"url\":\"/show/Movie.html\",\"type\":\"\",\"catId\":\"Movie\"},{\"name\":\"剧集\",\"url\":\"/show/Tv.html\",\"type\":\"\",\"catId\":\"Tv\"},{\"name\":\"综艺\",\"url\":\"/show/Variety.html\",\"type\":\"\",\"catId\":\"Variety\"},{\"name\":\"动漫\",\"url\":\"/show/Cartoon.html\",\"type\":\"\",\"catId\":\"Cartoon\"}],\"filter\":{\"selector\":\"div.module-item-box\",\"pagePrefix\":\"/page/\",\"rankPrefix\":\"/by/\",\"catPrefix\":\"/class/\",\"areaPrefix\":\"/area/\",\"cat\":{\"Movie\":{\"line\":0},\"Tv\":{\"line\":0},\"Variety\":{\"line\":0},\"Cartoon\":{\"line\":0}},\"area\":{\"Movie\":{\"line\":1},\"Tv\":{\"line\":1},\"Variety\":{\"line\":1},\"Cartoon\":{\"line\":1}},\"rank\":[{\"name\":\"评分排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\" :\"score\"},{\"name\":\"时间排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"time\"},{\"name\":\"热度排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"hits\"}]},\"tabVideos\":{\"defaultRank\":\"time\",\"videoSelector\":\"body > div > div.main > div > div.module > div.module-main.module-page > div.module-items.module-poster-items-base > a\",\"titleSelector\":\"div.module-poster-item-info > div.module-poster-item-title\",\"subtitleSelector\":\"div.module-item-cover > div.module-item-note\",\"imgSelector\":\"div.module-item-cover > div.module-item-pic > img\"},\"totalPage\":{\"type\":\"last\",\"selector\":\"#page > a\",\"subPrefix\":\"/\",\"subEnd\":\".html\"},\"detailUrl\":\"/detail/{vid}.html\",\"detailParse\":{\"detailSelector\":\"div.module-info-items > div.module-info-item\",\"introSelector\":\"div.module-info-item.module-info-introduction > div > p\",\"areaSelector\":\"div.module-info-tag > div.module-info-tag-link\",\"areaIndex\":2,\"yearSelector\":\"div.module-info-tag > div.module-info-tag-link\",\"yearIndex\":1,\"catSelector\":\"div.module-info-tag > div.module-info-tag-link\",\"catIndex\":3},\"sources\":{\"headSelector\":\"div.module-tab-items-box > div.module-tab-item.tab-item > span\",\"sourceSelector\":\" div.module-play-list > div\",\"titleSelector\":\"a > span\"},\"findPlayUrl\":{\"findType\":\"script\",\"scriptSelector\":\"div.player-box > div.player-box-main > script\",\"parseJs\":\"player\",\"jsUrl\":\"\",\"parsePrefix\":\"\",\"parseEnd\":\"\",\"appendArgs\":\"tm,key\"}}"
        },
        {
            "id":11,
            "key":"mac_smdyy",
            "name":"神马影院",
            "api":"https://www.smdyy.cc",
            "download":"",
            "group":0,
            "isActive":true,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"已启用",
            "type":2,
            "jiexiUrl":"https://www.6080x.cc",
            "searchUrl":"{homeUrl}/index.php/ajax/suggest?mid=1&limit=100&wd={words}",
            "parserClass":"MacCmsSelector",
            "userAgent":"",
            "config":"{\"naviSuffix\":\"/show/{catId}-{area}-{rank}-{cat}-----{page}---.html\",\"headers\":{},\"naviList\":[{\"name\":\"电影\",\"url\":\"/show/1-----------.html\",\"type\":\"\",\"catId\":\"1\"},{\"name\":\"剧集\",\"url\":\"/show/2-----------.html\",\"type\":\"\",\"catId\":\"2\"},{\"name\":\"综艺\",\"url\":\"/show/3-----------.html\",\"type\":\"\",\"catId\":\"3\"},{\"name\":\"动漫\",\"url\":\"/show/4-----------.html\",\"type\":\"\",\"catId\":\"4\"}],\"filter\":{\"selector\":\"#screenbox > ul.clearfix\",\"cat\":{\"1\":{\"line\":1,\"catUrl\":\"/list/1.html\",\"needAll\":true}},\"area\":{\"1\":{\"line\":1},\"2\":{\"line\":1},\"3\":{\"line\":1},\"4\":{\"line\":1}},\"rank\":[{\"name\":\"评分排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\" :\"score\"},{\"name\":\"时间排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"time\"},{\"name\":\"热度排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"hits\"}]},\"tabVideos\":{\"videoSelector\":\"div.stui-vodlist__box > a\",\"titleAttr\":\"title\",\"subtitleSelector\":\"span.pic-text.text-right\",\"scoreSelector\":\"span.pic-tag.pic-tag-top\"},\"totalPage\":{\"type\":\"split\",\"selector\":\"li.active.num\",\"subPrefix\":\"\",\"subEnd\":\"\"},\"detailUrl\":\"/kan/{vid}.html\",\"detailParse\":{\"detailSelector\":\"div.stui-content > div.stui-content__detail > p\"},\"sources\":{\"headSelector\":\"div.stui-pannel__head.clearfix > h3.iconfont.icon-iconfontplay2\",\"sourceSelector\":\"ul.stui-content__playlist.clearfix\",\"linkSelector\":\"li > a\"},\"findPlayUrl\":{\"findType\":\"script\",\"scriptSelector\":\"\",\"subPrefix\":\"var player_aaaa=\",\"subEnd\":\"</script>\",\"playPrefix\":\"\",\"playEnd\":\"\",\"parseJs\":\"playerconfig\",\"jsUrl\":\"\",\"playPrefix\":\"\",\"playEnd\":\"\"}}"
        },
        {
            "id":12,
            "key":"mac_cokemv",
            "name":"Coke影视",
            "api":"https://cokemv.me",
            "download":"https://jx.jsonplayer.com/player/?url=",
            "group":0,
            "isActive":true,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"已启用",
            "type":2,
            "jiexiUrl":"https://cokemv.co",
            "searchUrl":"{homeUrl}/index.php/ajax/suggest?mid=1&limit=100&wd={words}",
            "parserClass":"MacCmsSelector",
            "userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.0.0 Safari/537.36",
            "config":"{\"naviSuffix\":\"/vodshow/{catId}-{area}-{rank}-{cat}-----{page}---.html\",\"headers\":{},\"naviList\":[{\"name\":\"电影\",\"url\":\"/vodshow/1-----------.html\",\"type\":\"\",\"catId\":\"1\"},{\"name\":\"剧集\",\"url\":\"/vodshow/2-----------.html\",\"type\":\"\",\"catId\":\"2\"},{\"name\":\"动漫\",\"url\":\"/vodshow/3-----------.html\",\"type\":\"\",\"catId\":\"3\"},{\"name\":\"综艺\",\"url\":\"/vodshow/29-----------.html\",\"type\":\"\",\"catId\":\"29\"}],\"filter\":{\"selector\":\"div.module-item-box\",\"cat\":{\"1\":{\"line\":1,\"types\":[]}},\"area\":{\"1\":{\"line\":2,\"types\":[]},\"2\":{\"line\":1},\"3\":{\"line\":1},\"29\":{\"line\":0}},\"rank\":[{\"name\":\"评分排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\" :\"score\"},{\"name\":\"时间排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"time\"},{\"name\":\"热度排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"hits\"}]},\"indexVideos\":{},\"tabVideos\":{\"defaultRank\":\"time\",\"videoSelector\":\"body > div > div.main > div > div.module > a\",\"titleAttr\":\"title\",\"subtitleSelector\":\"div.module-item-cover > div.module-item-note\",\"imgSelector\":\"div.module-item-cover > div.module-item-pic > img\"},\"totalPage\":{\"type\":\"last\",\"selector\":\"#page > a\",\"subPrefix\":\"-\",\"subEnd\":\"---.html\"},\"detailUrl\":\"/voddetail/{vid}.html\",\"detailParse\":{\"detailSelector\":\"div.module.module-info > div.module-main > div.module-info-main > div.module-info-content > div.module-info-items > div\",\"introSelector\":\"div.module.module-info > div.module-main > div.module-info-main > div.module-info-content > div.module-info-items > div.module-info-item.module-info-introduction > div > p\",\"areaSelector\":\"div.module-info-heading > div.module-info-tag > div.module-info-tag-link:nth-child(3)\",\"yearSelector\":\"div.module-info-heading > div.module-info-tag > div.module-info-tag-link:nth-child(1)\",\"catSelector\":\"div.module-info-heading > div.module-info-tag > div.module-info-tag-link:nth-child(5)\"},\"sources\":{\"headSelector\":\"#y-playList > div\",\"sourceSelector\":\"#panel1 > div > div\",\"linkSelector\":\"a[href]\"},\"findPlayUrl\":{\"findType\":\"script\",\"scriptSelector\":\"\",\"subPrefix\":\"var player_aaaa=\",\"subEnd\":\"</script>\",\"parseJs\":\"playerconfig\",\"jsUrl\":\"\",\"parsePrefix\":\"\",\"parseEnd\":\"\"}}"
        },
        {
            "id":13,
            "key":"mac_mozhatu",
            "name":"莫扎兔站",
            "api":"https://www.mozhatu.com",
            "download":"https://jx.jsonplayer.com/player/?url=",
            "group":0,
            "isActive":true,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"已启用",
            "type":2,
            "jiexiUrl":"https://tv1920.com",
            "searchUrl":"{homeUrl}/index.php/ajax/suggest?mid=1&limit=100&wd={words}",
            "parserClass":"MacCmsSelector",
            "userAgent":"",
            "config":"{\"findWeb\":\"https://mozhatu.vip\",\"naviSuffix\":\"/index.php/vod/show{area}{rank}{cat}{catId}{page}.html\",\"headers\":{},\"naviList\":[{\"name\":\"电影\",\"url\":\"/index.php/vod/show/id/1.html\",\"type\":\"\",\"catId\":\"1\"},{\"name\":\"剧集\",\"url\":\"/index.php/vod/show/id/2.html\",\"type\":\"\",\"catId\":\"2\"},{\"name\":\"综艺\",\"url\":\"/index.php/vod/show/id/3.html\",\"type\":\"\",\"catId\":\"3\"},{\"name\":\"动漫\",\"url\":\"/index.php/vod/show/id/4.html\",\"type\":\"\",\"catId\":\"4\"},{\"name\":\"记录片\",\"url\":\"/index.php/vod/show/id/5.html\",\"type\":\"\",\"catId\":\"5\"}],\"filter\":{\"selector\":\"div.module-item-box\",\"catIdPrefix\":\"/id/\",\"pagePrefix\":\"/page/\",\"rankPrefix\":\"/by/\",\"cat\":{\"1\":{\"line\":0},\"2\":{\"line\":0},\"3\":{\"line\":0},\"4\":{\"line\":0}},\"catPrefix\":\"/class/\",\"area\":{\"1\":{\"line\":1},\"2\":{\"line\":1},\"3\":{\"line\":1},\"4\":{\"line\":1},\"5\":{\"line\":0}},\"areaPrefix\":\"/area/\",\"rank\":[{\"name\":\"评分排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\" :\"score\"},{\"name\":\"时间排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"time\"},{\"name\":\"热度排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"hits\"}]},\"tabVideos\":{\"defaultRank\":\"time\",\"videoSelector\":\"div.main > div > div.module > a\",\"titleAttr\":\"title\",\"subtitleSelector\":\"div.module-item-cover > div.module-item-note\",\"imgSelector\":\"div.module-item-cover > div.module-item-pic > img\"},\"totalPage\":{\"type\":\"last\",\"selector\":\"#page > a\",\"subPrefix\":\"/\",\"subEnd\":\".html\"},\"detailUrl\":\"/index.php/vod/detail/id/{vid}.html\",\"detailParse\":{\"detailSelector\":\"div.module-info-items > div.module-info-item\",\"introSelector\":\"div.module-info-item.module-info-introduction > div > p\",\"areaSelector\":\"div.module-info-tag > div.module-info-tag-link\",\"areaIndex\":1,\"yearSelector\":\"div.module-info-tag > div.module-info-tag-link\",\"yearIndex\":0,\"catSelector\":\"div.module-info-tag > div.module-info-tag-link\",\"catIndex\":2},\"sources\":{\"headSelector\":\"div.module-tab-items-box > div.module-tab-item.tab-item > span\",\"sourceSelector\":\" div.module-play-list > div\",\"titleSelector\":\"a > span\"},\"findPlayUrl\":{\"findType\":\"script\",\"scriptSelector\":\"div.player-box > div.player-box-main > script\",\"parseJs\":\"player\",\"jsUrl\":\"\",\"parsePrefix\":\"\",\"parseEnd\":\"\",\"appendArgs\":\"tm,key\"}}"
        },        
        {
            "id":15,
            "key":"juhuang",
            "name":"剧荒影视",
            "api":"https://www.juhuang.tv",
            "download":"https://jx.jsonplayer.com/player/?url=",
            "group":0,
            "isActive":true,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"已启用",
            "type":2,
            "jiexiUrl":"https://web-webapi-tsjqsvyzyx.cn-shenzhen.fcapp.run/?url=",
            "searchUrl":"https://so.juhuang.tv/soapi.php?wd={words}",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":16,
            "key":"piaku",
            "name":"片库影视",
            "api":"https://www.piaku.cc",
            "download":"",
            "group":1,
            "isActive":true,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"已启用",
            "type":2,
            "jiexiUrl":"https://player.021huaying.com/player/play.php?url=",
            "searchUrl":"{homeUrl}/s/-------------/?wd={words}",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":17,
            "key":"mac_shoujikanju",
            "name":"手机看剧",
            "api":"https://www.shoujikanju.com",
            "download":"https://jx.jsonplayer.com/player/?url=",
            "group":0,
            "isActive":true,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"已启用",
            "type":2,
            "jiexiUrl":"https://www.shoujikanju.com",
            "searchUrl":"{homeUrl}/index.php/ajax/suggest?mid=1&limit=100&wd={words}",
            "parserClass":"MacCmsSelector",
            "userAgent":"",
            "config":"{\"naviSuffix\":\"/sort/{catId}-{page}.html\",\"headers\":{},\"naviList\":[{\"name\":\"电影\",\"url\":\"/sort/1.html\",\"type\":\"\",\"catId\":\"1\"},{\"name\":\"剧集\",\"url\":\"/sort/2.html\",\"type\":\"\",\"catId\":\"2\"},{\"name\":\"综艺\",\"url\":\"/sort/3.html\",\"type\":\"\",\"catId\":\"3\"},{\"name\":\"动漫\",\"url\":\"/sort/4.html\",\"type\":\"\",\"catId\":\"4\"},{\"name\":\"纪录片\",\"url\":\"/sort/5.html\",\"type\":\"\",\"catId\":\"5\"}],\"indexVideos\":{\"videoSelector\":\"#list > li > a\",\"titleSelector\":\"span\",\"subtitleSelector\":\"em\",\"imgSelector\":\"img\"},\"tabVideos\":{\"videoSelector\":\"#list > li > a\",\"titleSelector\":\"span\",\"subtitleSelector\":\"em\",\"imgSelector\":\"img\"},\"detailUrl\":\"/vod/{vid}.html\",\"detailParse\":{\"detailSelector\":\"div.stui-content__detail > p\",\"introSelector\":\"div[style*=\\\"text-indent\\\"]\"},\"sources\":{\"startHeader\":1,\"headSelector\":\"#content > div.bd > div.bd_title > b\",\"startSource\":1,\"sourceSelector\":\"#nav\",\"linkSelector\":\"li > a\"},\"findPlayUrl\":{\"findType\":\"script\",\"scriptSelector\":\"\",\"subPrefix\":\"var player_aaaa=\",\"subEnd\":\"</script>\",\"playPrefix\":\"\",\"playEnd\":\"\",\"parseJs\":\"player\",\"jsUrl\":\"\",\"parsePrefix\":\"\",\"parseEnd\":\"\"}}"
        },
	{
            "id":14,
            "key":"saohuo",
            "name":"骚火电影",
            "api":"https://shdy2.com",
            "download":"",
            "group":0,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":true,
            "isNavigation":true,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":2,
            "jiexiUrl":"http://shapp.us",
            "searchUrl":"{homeUrl}/search.php?page={pg}&searchword={words}",
            "parserClass":"",
            "userAgent":"Mozilla/5.0 (Linux; Android 10; SM-G981B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.162 Mobile Safari/537.36",
            "config":""
        },
        {
            "id":18,
            "key":"lgyy",
            "name":"蓝光影院",
            "api":"https://www.lgyy.tv",
            "download":"",
            "group":0,
            "isActive":false,
            "isHidden":true,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"已启用",
            "type":2,
            "jiexiUrl":"https://www.lgyy.tv/static/player/dplayer.php?url=",
            "searchUrl":"{homeUrl}/vodsearch/{words}----------{pg}---.html",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":19,
            "key":"mac_ysgc",
            "name":"影视工厂",
            "api":"https://www.ysgc.vip",
            "download":"",
            "group":0,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":2,
            "jiexiUrl":"https://www.ysgcapp.com/",
            "searchUrl":"{homeUrl}/index.php/ajax/suggest?mid=1&limit=100&wd={words}",
            "parserClass":"MacCmsSelector",
            "userAgent":"",
            "config":"{\"findWeb\":\"https://www.ysgcapp.com\",\"index\":true,\"naviSuffix\":\"/vodshow/{catId}-{area}-{rank}-{cat}-----{page}---.html\",\"headers\":{},\"naviList\":[{\"name\":\"电影\",\"url\":\"/vodshow/1-----------.html\",\"type\":\"\",\"catId\":\"1\"},{\"name\":\"剧集\",\"url\":\"/vodshow/2-----------.html\",\"type\":\"\",\"catId\":\"2\"},{\"name\":\"综艺\",\"url\":\"/vodshow/3-----------.html\",\"type\":\"\",\"catId\":\"3\"},{\"name\":\"动漫\",\"url\":\"/vodshow/4-----------.html\",\"type\":\"\",\"catId\":\"4\"}],\"filter\":{\"selector\":\"div.myui-panel.active.myui-panel-bg2.clearfix > div > div.myui-panel_bd > div > ul\",\"cat\":{\"1\":{\"line\":0},\"2\":{\"line\":0},\"3\":{\"line\":0},\"4\":{\"line\":0}},\"area\":{\"1\":{\"line\":1},\"2\":{\"line\":1},\"3\":{\"line\":1},\"4\":{\"line\":1}},\"rank\":[{\"name\":\"评分排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\" :\"score\"},{\"name\":\"时间排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"time\"},{\"name\":\"热度排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"hits\"}]},\"indexVideos\":{\"videoSelector\":\"ul.myui-vodlist.clearfix > li.col-lg-5.col-md-6.col-sm-4.col-xs-3 > div.myui-vodlist__box > a\",\"titleAttr\":\"title\",\"subtitleSelector\":\"span.pic-text.text-right\",\"scoreSelector\":\"span.pic-tag.pic-tag-top\"},\"tabVideos\":{\"videoSelector\":\"div.myui-vodlist__box > a\",\"titleAttr\":\"title\",\"subtitleSelector\":\"span.pic-text.text-right\",\"scoreSelector\":\"span.pic-tag.pic-tag-top\"},\"totalPage\":{\"type\":\"last\",\"selector\":\"ul.myui-page.text-center.clearfix > li > a\",\"subPrefix\":\"-\",\"subEnd\":\"---.html\"},\"detailUrl\":\"/voddetail/{vid}.html\",\"detailParse\":{\"detailSelector\":\"div.myui-content__detail > p\",\"introSelector\":\"#desc > div > div.myui-panel_bd > div > span.data\"},\"sources\":{\"headSelector\":\"div.myui-panel_hd > div > ul > li > a\",\"sourceSelector\":\"ul.myui-content__list.scrollbar.sort-list.clearfix\",\"linkSelector\":\"li > a\"},\"findPlayUrl\":{\"findType\":\"script\",\"scriptSelector\":\"\",\"subPrefix\":\"var player_aaaa=\",\"subEnd\":\"</script>\",\"playPrefix\":\"\",\"playEnd\":\"\",\"parseJs\":\"player\",\"jsUrl\":\"\",\"playPrefix\":\"\",\"playEnd\":\"\"}}"
        },
        {
            "id":20,
            "key":"zxzj",
            "name":"在线之家",
            "api":"https://www.zxzj.pro",
            "download":"",
            "group":1,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":2,
            "jiexiUrl":"https://www.zxzj.pro/line4.php?url=",
            "searchUrl":"{homeUrl}/index.php/ajax/suggest?mid=1&limit=100&wd={words}",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":21,
            "key":"mac_yszj",
            "name":"影视之家",
            "api":"https://www.yszj.tv",
            "download":"",
            "group":0,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":2,
            "jiexiUrl":"https://www.yszj.tv",
            "searchUrl":"{homeUrl}/index.php/ajax/suggest?mid=1&limit=100&wd={words}",
            "parserClass":"MacCmsSelector",
            "userAgent":"",
            "config":"{\"naviSuffix\":\"/vodshow/{catId}-{area}-{rank}-{cat}-----{page}---.html\",\"headers\":{},\"naviList\":[{\"name\":\"电影\",\"url\":\"/vodshow/1-----------.html\",\"type\":\"\",\"catId\":\"1\"},{\"name\":\"剧集\",\"url\":\"/vodshow/2-----------.html\",\"type\":\"\",\"catId\":\"2\"},{\"name\":\"综艺\",\"url\":\"/vodshow/3-----------.html\",\"type\":\"\",\"catId\":\"3\"},{\"name\":\"动漫\",\"url\":\"/vodshow/4-----------.html\",\"type\":\"\",\"catId\":\"4\"}],\"filter\":{\"selector\":\"#screenbox > ul.clearfix\",\"cat\":{\"1\":{\"line\":1},\"2\":{\"line\":1},\"3\":{\"line\":1},\"4\":{\"line\":1}},\"area\":{\"1\":{\"line\":2},\"2\":{\"line\":2},\"3\":{\"line\":2},\"4\":{\"line\":2}},\"rank\":[{\"name\":\"评分排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\" :\"score\"},{\"name\":\"时间排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"time\"},{\"name\":\"热度排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"hits\"}]},\"tabVideos\":{\"videoSelector\":\"div.stui-vodlist__box > a\",\"titleAttr\":\"title\",\"subtitleSelector\":\"span.pic-text.text-right\"},\"totalPage\":{\"type\":\"split\",\"selector\":\"li.active.num\",\"subPrefix\":\"\",\"subEnd\":\"\"},\"detailUrl\":\"/voddetail/{vid}.html\",\"detailParse\":{\"detailSelector\":\"div.stui-content > div.stui-content__detail > p\"},\"sources\":{\"headSelector\":\"ul.nav.nav-tabs.dpplay.pull-right > li > a\",\"sourceSelector\":\"ul.stui-content__playlist.clearfix.sort-list\",\"linkSelector\":\"li > a\"},\"findPlayUrl\":{\"findType\":\"script\",\"scriptSelector\":\"\",\"subPrefix\":\"var player_aaaa=\",\"subEnd\":\"</script>\",\"playPrefix\":\"\",\"playEnd\":\"\",\"parseJs\":\"player\",\"jsUrl\":\"\",\"playPrefix\":\"\",\"playEnd\":\"\"}}"
        },
        {
            "id":22,
            "key":"mac_ylwt33",
            "name":"333影视",
            "api":"https://www.ylwt33.com",
            "download":"",
            "group":0,
            "isActive":true,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"已启用",
            "type":2,
            "jiexiUrl":"https://www.ylwt33.com",
            "searchUrl":"/vodsearch/{words}-------------.html",
            "parserClass":"MacCmsSelector",
            "userAgent":"",
            "config":"{\"naviSuffix\":\"/vodshow/{catId}-{area}-{rank}-{cat}-----{page}---.html\",\"headers\":{},\"naviList\":[{\"name\":\"电影\",\"url\":\"/vodshow/1-----------.html\",\"type\":\"\",\"catId\":\"1\"},{\"name\":\"剧集\",\"url\":\"/vodshow/2-----------.html\",\"type\":\"\",\"catId\":\"2\"},{\"name\":\"综艺\",\"url\":\"/vodshow/3-----------.html\",\"type\":\"\",\"catId\":\"3\"},{\"name\":\"动漫\",\"url\":\"/vodshow/4-----------.html\",\"type\":\"\",\"catId\":\"4\"}],\"filter\":{\"selector\":\"div.myui-panel.active.myui-panel-bg2.clearfix > div > div.myui-panel_bd > div > ul\",\"cat\":{\"1\":{\"line\":0},\"2\":{\"line\":0},\"3\":{\"line\":0},\"4\":{\"line\":0}},\"area\":{\"1\":{\"line\":1},\"2\":{\"line\":1},\"3\":{\"line\":1},\"4\":{\"line\":1}},\"rank\":[{\"name\":\"评分排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\" :\"score\"},{\"name\":\"时间排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"time\"},{\"name\":\"热度排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"hits\"}]},\"tabVideos\":{\"videoSelector\":\"div.myui-vodlist__box > a\",\"titleAttr\":\"title\",\"subtitleSelector\":\"span.pic-text.text-right\"}, \"searchVideos\":{\"videoSelector\":\"#searchList > li.clearfix > div > a\",\"titleAttr\":\"title\",\"subtitleSelector\":\"span.pic-text.text-right\"},\"totalPage\":{\"type\":\"last\",\"selector\":\"ul.myui-page.text-center.clearfix > li > a\",\"subPrefix\":\"-\",\"subEnd\":\"---.html\"},\"detailUrl\":\"/voddetail/{vid}.html\",\"detailParse\":{\"detailSelector\":\"div.myui-content__detail > p\",\"introSelector\":\"#desc > div > div.myui-panel_bd > div > span.data\"},\"sources\":{\"headSelector\":\"div.myui-panel_hd > div > ul > li > a\",\"sourceSelector\":\"ul.myui-content__list.scrollbar.sort-list.clearfix\",\"linkSelector\":\"li > a\"},\"findPlayUrl\":{\"findType\":\"script\",\"scriptSelector\":\"\",\"subPrefix\":\"var player_aaaa=\",\"subEnd\":\"</script>\",\"playPrefix\":\"\",\"playEnd\":\"\",\"parseJs\":\"player\",\"jsUrl\":\"\",\"playPrefix\":\"\",\"playEnd\":\"\"}}"
        },
        {
            "id":23,
            "key":"miaomiao",
            "name":"喵喵影视",
            "api":"https://www.2345ka.com",
            "download":"",
            "group":0,
            "isActive":false,
            "isHidden":true,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":2,
            "jiexiUrl":"",
            "searchUrl":"{homeUrl}/s/{words}/{pg}.html",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":25,
            "key":"4kdv",
            "name":"4kdv影视",
            "api":"https://www.4ky.cc",
            "download":"",
            "group":0,
            "isActive":false,
            "isHidden":true,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":2,
            "jiexiUrl":"https://jx.4kdv.com/?url=",
            "searchUrl":"{homeUrl}/vodsearch/{words}----------{pg}---.html",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":26,
            "key":"honglingjin",
            "name":"红领巾站",
            "api":"https://www.honglingjin.tv",
            "download":"",
            "group":0,
            "isActive":true,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"已启用",
            "type":3,
            "jiexiUrl":"https://www.honglingjin.tv/vodplay/{vid}.html",
            "searchUrl":"{homeUrl}/search/{words}",
            "parserClass":"",
            "userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.0.0 Safari/537.36",
            "config":""
        },
        {
            "id":27,
            "key":"mac_aidi",
            "name":"爱迪影视",
            "api":"https://aidi.tv",
            "download":"https://jx.jsonplayer.com/player/?url=",
            "group":0,
            "isActive":false,
            "isHidden":true,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":2,
            "jiexiUrl":"/movie/{vid}.html",
            "searchUrl":"{homeUrl}/index.php/ajax/suggest?mid=1&limit=100&wd={words}",
            "parserClass":"MacCmsSelector",
            "userAgent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.0.0 Safari/537.36",
            "config":"{\"naviSuffix\":\"/show/{catId}-{area}-{rank}-{cat}-----{page}---.html\",\"headers\":{},\"naviList\":[{\"name\":\"电影\",\"url\":\"/show/dianying-----------.html\",\"type\":\"\",\"catId\":\"dianying\"},{\"name\":\"剧集\",\"url\":\"/show/lianxuju-----------.html\",\"type\":\"\",\"catId\":\"lianxuju\"},{\"name\":\"综艺\",\"url\":\"/show/zongyi-----------.html\",\"type\":\"\",\"catId\":\"zongyi\"},{\"name\":\"动漫\",\"url\":\"/show/dongman-----------.html\",\"type\":\"\",\"catId\":\"dongman\"},{\"name\":\"记录片\",\"url\":\"/show/jilu-----------.html\",\"type\":\"\",\"catId\":\"jilu\"}],\"filter\":{\"selector\":\"ul.screen_list.clearfix\",\"cat\":{\"dianying\":{\"line\":1,\"types\":[]},\"lianxuju\":{\"line\":1},\"zongyi\":{\"line\":1},\"dongman\":{\"line\":1}},\"area\":{\"dianying\":{\"line\":2,\"types\":[]},\"lianxuju\":{\"line\":2},\"zongyi\":{\"line\":2},\"dongman\":{\"line\":2}},\"rank\":[{\"name\":\"评分排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\" :\"score\"},{\"name\":\"时间排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"time\"},{\"name\":\"热度排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"hits\"}]},\"indexVideos\":{},\"tabVideos\":{\"videoSelector\":\"ul.vodlist.vodlist_wi > li > a\",\"titleAttr\":\"title\",\"subtitleSelector\":\"span.pic_text.text_right\"},\"detailUrl\":\"/movie/{vid}.html\",\"detailParse\":{\"detailSelector\":\"li.data > a\",\"introSelector\":\"div.content_desc.context.clearfix > span\"},\"sources\":{\"headSelector\":\"div.play_source > div.play_source_tab.list_scroll.clearfix > a\",\"sourceSelector\":\"div.play_source > div.play_list_box > div.playlist_full > ul\",\"linkSelector\":\"li > a\"},\"findPlayUrl\":{\"findType\":\"script\",\"scriptSelector\":\"\",\"subPrefix\":\"var player_data=\",\"subEnd\":\"</script>\",\"playPrefix\":\"\\\"url\\\": \\\"\",\"playEnd\":\"\\\"\",\"parseJs\":\"playerconfig\",\"jsUrl\":\"\",\"parsePrefix\":\"\",\"parseEnd\":\"\"},\"totalPage\":{\"type\":\"last\",\"selector\":\"ul.page.text_center.cleafix > li > a\",\"subPrefix\":\"-\",\"subEnd\":\"---.html\"}}"
        },
        {
            "id":28,
            "key":"mac_ganfanys",
            "name":"干饭影视",
            "api":"https://www.gfysys1.com",
            "download":"https://jx.jsonplayer.com/player/?url=",
            "group":0,
            "isActive":true,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"已启用",
            "type":2,
            "jiexiUrl":"https://gfys.top/",
            "searchUrl":"{homeUrl}/index.php/ajax/suggest?mid=1&limit=100&wd={words}",
            "parserClass":"MacCmsSelector",
            "userAgent":"",
            "config":"{\"naviSuffix\":\"/vodshow/{catId}-{area}-{rank}-{cat}-----{page}---.html\",\"headers\":{},\"naviList\":[{\"name\":\"电影\",\"url\":\"/vodshow/1-----------.html\",\"type\":\"\",\"catId\":\"1\"},{\"name\":\"剧集\",\"url\":\"/vodshow/2-----------.html\",\"type\":\"\",\"catId\":\"2\"},{\"name\":\"综艺\",\"url\":\"/vodshow/3-----------.html\",\"type\":\"\",\"catId\":\"3\"},{\"name\":\"动漫\",\"url\":\"/vodshow/4-----------.html\",\"type\":\"\",\"catId\":\"4\"}],\"filter\":{\"selector\":\"#screenbox > ul.clearfix\",\"cat\":{\"1\":{\"line\":0,\"types\":[]},\"2\":{\"line\":0},\"3\":{\"line\":0},\"4\":{\"line\":0}},\"area\":{\"1\":{\"line\":1,\"types\":[]},\"2\":{\"line\":1},\"3\":{\"line\":1},\"4\":{\"line\":1}},\"rank\":[{\"name\":\"评分排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\" :\"score\"},{\"name\":\"时间排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"time\"},{\"name\":\"热度排序\",\"url\":\"\",\"type\":\"rank\",\"subtitle\":\"hits\"}]},\"indexVideos\":{\"videoSelector\":\"div.stui-vodlist__box > a\",\"titleAttr\":\"title\"},\"tabVideos\":{\"videoSelector\":\"div.stui-vodlist__box > a\",\"titleAttr\":\"title\",\"subtitleSelector\":\"\"},\"likeVideos\":{\"videoSelector\":\"div.stui-vodlist__box > a\",\"titleAttr\":\"title\",\"maxVideo\":9},\"totalPage\":{\"type\":\"split\",\"selector\":\"li.active.num\",\"subPrefix\":\"\",\"subEnd\":\"\"},\"detailUrl\":\"/voddetail/{vid}.html\",\"detailParse\":{\"detailSelector\":\"div.stui-content__detail > p\",\"introSelector\":\"div.stui-content__detail > p.desc.detail > span.detail-content\"},\"sources\":{\"headSelector\":\"div.stui-pannel__head.bottom-line.active.dpplay.clearfix > ul > li > a\",\"sourceSelector\":\"div.tab-content.stui-pannel_bd.col-pd.maxheight.clearfix > div > ul\",\"linkSelector\":\"li > a\"},\"findPlayUrl\":{\"findType\":\"script\",\"scriptSelector\":\"\",\"subPrefix\":\"var player_aaaa=\",\"subEnd\":\"</script>\",\"playPrefix\":\"\",\"playEnd\":\"\",\"parseJs\":\"playerconfig\",\"jsUrl\":\"\",\"parsePrefix\":\"\",\"parseEnd\":\"\"}}"
        },
        
        {
            "id":30,
            "key":"wujinApi",
            "name":"无尽",
            "api":"https://api.wujinapi.me/api.php/provide/vod/from/wjm3u8/",
            "download":"",
            "group":0,
            "isActive":true,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":true,
            "needJiexi":false,
            "isSearch":true,
            "status":"已启用",
            "type":0,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":31,
            "key":"ffzyApi",
            "name":"非凡",
            "api":"http://cj.ffzyapi.com/api.php/provide/vod/from/ffm3u8",
            "download":"",
            "group":1,
            "isActive":true,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"已启用",
            "type":0,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":32,
            "key":"lziApi",
            "name":"量子",
            "api":"https://cj.lziapi.com/api.php/provide/vod/from/lzm3u8",
            "download":"",
            "group":1,
            "isActive":true,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"已启用",
            "type":0,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":33,
            "key":"zyk1080",
            "name":"Zyku",
            "api":"https://api.1080zyku.com/inc/api.php",
            "download":"",
            "group":1,
            "isActive":true,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"已启用",
            "type":1,
            "jiexiUrl":"",
            "searchUrl":"wd=",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
	{
            "id":41,
            "key":"tiankongApi",
            "name":"天空",
            "api":"https://api.tiankongapi.com/api.php/provide/vod/from/tkm3u8",
            "download":"",
            "group":0,
            "isActive":true,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"已启用",
            "type":0,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
	{
            "id":56,
            "key":"77hanjuApi",
            "name":"韩剧",
            "api":"https://www.77hanju.com/api.php/provide/vod/from/mkm3u8",
            "download":"",
            "group":0,
            "isActive":true,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"已启用",
            "type":0,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":35,
            "key":"hongniuApi",
            "name":"红牛",
            "api":"https://www.hongniuzy2.com/api.php/provide/vod/from/hnm3u8/",
            "download":"",
            "group":0,
            "isActive":true,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"已启用",
            "type":0,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":36,
            "key":"guangsuApi",
            "name":"光速",
            "api":"https://api.guangsuapi.com/api.php/provide/vod/from/gsm3u8/",
            "download":"",
            "group":0,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":0,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":37,
            "key":"xinlangApi",
            "name":"新浪",
            "api":"https://api.xinlangapi.com/xinlangapi.php/provide/vod/from/xlm3u8/",
            "download":"",
            "group":0,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":0,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":38,
            "key":"jinyingApi",
            "name":"金鹰",
            "api":"https://jyzyapi.com/provide/vod/from/jinyingm3u8/at/json/",
            "download":"",
            "group":0,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":0,
            "jiexiUrl":"",
            "searchUrl":"wd=",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
	{
            "id":29,
            "key":"kuaiboApi",
            "name":"快播",
            "api":"http://www.kuaibozy.com/api.php/provide/vod/from/kbm3u8",
            "download":"",
            "group":0,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":true,
            "needJiexi":false,
            "isSearch":true,
            "status":"已启用",
            "type":0,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":39,
            "key":"yhzyApi",
            "name":"樱花",
            "api":"http://m3u8.apiyhzy.com/api.php/provide/vod/",
            "download":"",
            "group":0,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":0,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":40,
            "key":"taopianApi",
            "name":"淘片",
            "api":"https://taopianapi.com/home/cjapi/as/mc/vod/xml/m3u8",
            "download":"get",
            "group":0,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":1,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },        
        {
            "id":42,
            "key":"wolongApi",
            "name":"卧龙",
            "api":"https://collect.wolongzyw.com/api.php/provide/vod/",
            "download":"",
            "group":0,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":0,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":43,
            "key":"xhzyApi",
            "name":"星海",
            "api":"https://www.xhzy01.com/api.php/provide/vod/from/xhm3u8",
            "download":"",
            "group":0,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":0,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":44,
            "key":"ckzyApi",
            "name":"CK",
            "api":"https://ckzy.me/api.php/provide/vod/from/ckm3u8",
            "download":"",
            "group":0,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":0,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":45,
            "key":"ukuApi",
            "name":"U酷",
            "api":"https://api.ukuapi.com/api.php/provide/vod/from/ukm3u8",
            "download":"",
            "group":0,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":0,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":46,
            "key":"ikunApi",
            "name":"iKun",
            "api":"https://ikunzyapi.com/api.php/provide/vod/from/ikm3u8",
            "download":"",
            "group":0,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":0,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":50,
            "key":"ikaolQiyi",
            "name":"考拉",
            "api":"https://ikaola.tv/api.php/provide/vod/",
            "download":"",
            "group":0,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":0,
            "jiexiUrl":"https://ikaola.tv/vwnet/dplayer/?url=",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":51,
            "key":"lehootv",
            "name":"乐活",
            "api":"https://lehootv.com/api.php/provide/vod/",
            "download":"",
            "group":0,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":0,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":52,
            "key":"ylzyApi",
            "name":"鱼乐",
            "api":"https://api.ylzy1.com/api.php/provide/vod/from/lem3u8",
            "download":"",
            "group":0,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":0,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":55,
            "key":"yikanApi",
            "name":"易看",
            "api":"https://api.yikanapi.com/api.php/provide/vod/from/yikan",
            "download":"",
            "group":0,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":0,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        
        {
            "id":57,
            "key":"tomcaiji",
            "name":"Tom",
            "api":"https://api.tomcaiji.com/api.php/provide/vod/from/tomm3u8",
            "download":"",
            "group":0,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":0,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":58,
            "key":"feisuApi",
            "name":"飞速",
            "api":"http://fszy1.com/api.php/provide/vod/from/fsm3u8",
            "download":"",
            "group":0,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":0,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":59,
            "key":"kudianApi",
            "name":"酷点",
            "api":"https://api.kuapi.cc/api.php/provide/vod/from/kdm3u8",
            "download":"",
            "group":0,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":0,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":60,
            "key":"sdzyApi",
            "name":"闪电",
            "api":"https://sdzyapi.com/api.php/provide/vod/from/sdm3u8",
            "download":"",
            "group":0,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":0,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":61,
            "key":"kuaicheApi",
            "name":"快车",
            "api":"https://caiji.kczyapi.com/api.php/provide/vod/from/kcm3u8",
            "download":"",
            "group":0,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":0,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":62,
            "key":"foxzyApi",
            "name":"Fox",
            "api":"https://api.foxzyapi.com/api.php/provide/vod/from/foxm3u8",
            "download":"",
            "group":0,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":0,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":63,
            "key":"suduApi",
            "name":"速8",
            "api":"http://www.ggmmzy.com:9999/inc/xml",
            "download":"",
            "group":2,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":1,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":64,
            "key":"huanyaApi",
            "name":"环亚",
            "api":"http://wmcj8.com/inc/sapi.php",
            "download":"",
            "group":2,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":1,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":65,
            "key":"leboApi",
            "name":"乐播",
            "api":"https://lbapi9.com/api.php/provide/vod/at/xml/",
            "download":"",
            "group":2,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":1,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":66,
            "key":"senlinApi",
            "name":"森林",
            "api":"https://slapibf.com/api.php/provide/vod/at/xml/",
            "download":"",
            "group":2,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":1,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":67,
            "key":"sewozyApi",
            "name":"S窝",
            "api":"https://sewozyapi.com/api.php/provide/vod/from/swm3u8",
            "download":"",
            "group":2,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":0,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":68,
            "key":"huakuiApi",
            "name":"花魁",
            "api":"https://caiji.huakuiapi.com/inc/api.php",
            "download":"",
            "group":2,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":1,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":69,
            "key":"dadiApi",
            "name":"大地",
            "api":"https://dadiapi.com/api.php",
            "download":"",
            "group":2,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":1,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":70,
            "key":"shayuApi",
            "name":"鲨鱼",
            "api":"https://shayuapi.com/api.php/provide/vod/at/xml/",
            "download":"",
            "group":2,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":1,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":71,
            "key":"fanhaoApi",
            "name":"番号",
            "api":"http://fhapi9.com/api.php/provide/vod/at/xml/",
            "download":"",
            "group":2,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":1,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":72,
            "key":"aosikazyApi",
            "name":"奥斯卡",
            "api":"https://aosikazy.com/api.php/provide/vod/",
            "download":"",
            "group":2,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":0,
            "jiexiUrl":"https://aosikazy11.com/?url=",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":73,
            "key":"91mdApi",
            "name":"传媒",
            "api":"https://91md.me/api.php/provide/vod/",
            "download":"",
            "group":2,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":0,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":74,
            "key":"dmmapiApi",
            "name":"Dmm",
            "api":"https://www.dmmapi.com/home/cjapi/asd2c7/mc10/vod/xml",
            "download":"get",
            "group":2,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":1,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":75,
            "key":"caoliuapi",
            "name":"草榴",
            "api":"https://www.caiji02.com/home/cjapi/cfas/mc10/vod/xml",
            "download":"get",
            "group":2,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":1,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":76,
            "key":"yibendaoApi",
            "name":"本道",
            "api":"https://www.caiji03.com/home/cjapi/cfg8/mc10/vod/xml",
            "download":"get",
            "group":2,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":1,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":77,
            "key":"qingqingApi",
            "name":"青青",
            "api":"https://www.caiji05.com/home/cjapi/cfda/mc10/vod/xml",
            "download":"get",
            "group":2,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":1,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":78,
            "key":"sdszyapi",
            "name":"屌丝",
            "api":"http://www.caiji24.com/home/cjapi/p0d2/mc10/vod/xml",
            "download":"get",
            "group":2,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":1,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        },
        {
            "id":79,
            "key":"huangguaApi",
            "name":"黄瓜",
            "api":"https://www.caiji10.com/home/cjapi/cfs6/mc10/vod/xml",
            "download":"get",
            "group":2,
            "isActive":false,
            "isHidden":false,
            "reverseOrder":false,
            "isNavigation":false,
            "needJiexi":false,
            "isSearch":true,
            "status":"未启用",
            "type":1,
            "jiexiUrl":"",
            "searchUrl":"",
            "parserClass":"",
            "userAgent":"",
            "config":""
        }
    ],
    "parsers":[
        {
            "id":1,
            "key":"okjx",
            "name":"Web播放",
            "api":"",
            "isActive":true,
            "type":1,
            "userAgent":"",
            "selector":"selector",
            "siteKeys":"all"
        },
        {
            "id":2,
            "key":"xmflv",
            "name":"虾米解析",
            "api":"https://jx.xmflv.com/index.php?url=",
            "isActive":true,
            "type":0,
            "userAgent":"",
            "selector":"selector",
            "siteKeys":"all"
        },
        {
            "id":3,
            "key":"jsonplayer",
            "name":"Json解析",
            "api":"https://jx.jsonplayer.com/player/?url=",
            "isActive":true,
            "type":0,
            "userAgent":"",
            "selector":"selector",
            "siteKeys":"all"
        },
        {
            "id":4,
            "key":"4kdv",
            "name":"4Kdv解析",
            "api":"https://jx.4kdv.com/player/analysis.php?v=",
            "isActive":true,
            "type":0,
            "userAgent":"",
            "selector":"selector",
            "siteKeys":"all"
        },
        {
            "id":5,
            "key":"m3u8jx",
            "name":"m3u8解析",
            "api":"https://jx.m3u8.tv/jiexi/?url=",
            "isActive":true,
            "type":0,
            "userAgent":"",
            "selector":"url",
            "siteKeys":"all"
        },
        {
            "id":6,
            "key":"bwjiexi",
            "name":"BW66解析",
            "api":"https://jx1.bw66.xyz/player/?url=",
            "isActive":true,
            "type":0,
            "userAgent":"",
            "selector":"selector",
            "siteKeys":"all"
        },
        {
            "id":7,
            "key":"777jx",
            "name":"777解析",
            "api":"https://jx.777jiexi.com/player/?url=",
            "isActive":true,
            "type":0,
            "userAgent":"",
            "selector":"selector",
            "siteKeys":"all"
        },
        {
            "id":8,
            "key":"nxflv",
            "name":"诺讯解析",
            "api":"https://www.nxflv.com/?url=",
            "isActive":true,
            "type":0,
            "userAgent":"",
            "selector":"selector",
            "siteKeys":"all"
        }
    ],
    "ads":[
        "/hm.baidu.com/",
        ".51.la/",
        "dmku.thefilehosting.com/",
        ".cnzz.com/",
        ".googletagmanager.com/",
        ".google-analytics.com/",
        ".xianchengyou.com/",
        ".yunliunet.com/",
        ".yyxl.cc/",
        ".wyqwrfghj.live/"
    ]
}
